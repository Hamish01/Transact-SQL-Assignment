--USE DAD_Assignment

IF OBJECT_ID('Sale') IS NOT NULL
DROP TABLE SALE;

IF OBJECT_ID('Product') IS NOT NULL
DROP TABLE PRODUCT;

IF OBJECT_ID('Customer') IS NOT NULL
DROP TABLE CUSTOMER;

IF OBJECT_ID('Location') IS NOT NULL
DROP TABLE LOCATION;

GO

CREATE TABLE CUSTOMER (
CUSTID	INT
, CUSTNAME	NVARCHAR(100)
, SALES_YTD	MONEY
, STATUS	NVARCHAR(7)
, PRIMARY KEY	(CUSTID) 
);


CREATE TABLE PRODUCT (
PRODID	INT
, PRODNAME	NVARCHAR(100)
, SELLING_PRICE	MONEY
, SALES_YTD	MONEY
, PRIMARY KEY	(PRODID)
);

CREATE TABLE SALE (
SALEID	BIGINT
, CUSTID	INT
, PRODID	INT
, QTY	INT
, PRICE	MONEY
, SALEDATE	DATE
, PRIMARY KEY 	(SALEID)
, FOREIGN KEY 	(CUSTID) REFERENCES CUSTOMER
, FOREIGN KEY 	(PRODID) REFERENCES PRODUCT
);

CREATE TABLE LOCATION (
  LOCID	NVARCHAR(5)
, MINQTY	INTEGER
, MAXQTY	INTEGER
, PRIMARY KEY 	(LOCID)
, CONSTRAINT CHECK_LOCID_LENGTH CHECK (LEN(LOCID) = 5)
, CONSTRAINT CHECK_MINQTY_RANGE CHECK (MINQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_RANGE CHECK (MAXQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK (MAXQTY >= MINQTY)
);

IF OBJECT_ID('SALE_SEQ') IS NOT NULL
DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ;

GO

--task 1
IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL
DROP PROCEDURE ADD_CUSTOMER;
GO

CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS

BEGIN
    BEGIN TRY

        IF @PCUSTID < 1 OR @PCUSTID > 499
            THROW 50020, 'Customer ID out of range', 1

        INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
        VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');

    END TRY
    BEGIN CATCH
        if ERROR_NUMBER() = 2627
            THROW 50010, 'Duplicate customer ID', 1
        ELSE IF ERROR_NUMBER() = 50020
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;

END;

GO
--task 2

IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;
GO

CREATE PROCEDURE DELETE_ALL_CUSTOMERS  AS

BEGIN
    BEGIN TRY
        DELETE FROM CUSTOMER
        PRINT(CONCAT('number of rows deleted - ', @@ROWCOUNT))
    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1

    END CATCH;
END;

GO

--task 3

IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL
DROP PROCEDURE ADD_PRODUCT;
GO

CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR(100), @PPRICE MONEY AS

BEGIN
    BEGIN TRY

        IF @PPRODID < 1000 OR @PPRODID > 2500
            THROW 50040, 'Product ID out of range', 1
        IF @PPRICE < 0 OR @PPRICE > 999.99
            THROW 50050, 'Price out of range', 1
        INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
        VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);

    END TRY
    BEGIN CATCH
        if ERROR_NUMBER() = 2627
            THROW 50030, 'Duplicate product ID', 1
        ELSE IF ERROR_NUMBER() = 50040 OR ERROR_NUMBER() = 50050
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;

END;

GO

--task 4
IF OBJECT_ID('DELETE_ALL_PRODUCT') IS NOT NULL
DROP PROCEDURE DELETE_ALL_PRODUCT;
GO

CREATE PROCEDURE DELETE_ALL_PRODUCT AS

BEGIN
    BEGIN TRY
        DELETE FROM PRODUCT
        PRINT(CONCAT('number of rows deleted - ', @@ROWCOUNT))
    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1

    END CATCH;
END;


GO
--task 5
IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL
DROP PROCEDURE GET_CUSTOMER_STRING;
GO

CREATE PROCEDURE GET_CUSTOMER_STRING @pCustId INT, @pReturnString NVARCHAR(100) OUTPUT AS
BEGIN
    BEGIN TRY
        DECLARE @CustName NVARCHAR(100), @Status NVARCHAR(7), @YTD MONEY;
        
        SELECT @CustName = CUSTNAME, @Status = [STATUS], @YTD = SALES_YTD
        FROM CUSTOMER
        WHERE CUSTID = @pCustId

        IF @@ROWCOUNT = 0
            THROW 50060, 'Customer ID not found', 1
        SET @pReturnString = CONCAT('Custid: ', @pCustId, ' Name: ' , @CustName, ' Status: ', @Status, ' SalesYTD: ', @YTD);
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() IN (50060)
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END
    END CATCH
END
GO
--task 6
IF OBJECT_ID('UPD_CUST_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_CUST_SALESYTD;
GO
CREATE PROCEDURE UPD_CUST_SALESYTD @pCustId INT, @pamt MONEY OUTPUT AS
BEGIN
    BEGIN TRY
        IF @pamt < -999.99 or @pamt > 999.99
            THROW 50080, 'Amount out of range', 1
        UPDATE CUSTOMER SET SALES_YTD = SALES_YTD + @pamt WHERE CUSTID = @pCustId
        IF @@ROWCOUNT = 0
          THROW 50070, 'Customer ID not found', 1
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() IN (50070, 50080)
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END
    END CATCH
END

GO
--task 7
IF OBJECT_ID('GET_PROD_STRING') IS NOT NULL
DROP PROCEDURE GET_PROD_STRING;
GO

CREATE PROCEDURE GET_PROD_STRING @pProdId INT, @pReturnString NVARCHAR(100) OUTPUT AS
BEGIN
    BEGIN TRY
        DECLARE @ProdName NVARCHAR(100),@SellingPrice MONEY, @YTD MONEY;
        
        SELECT @ProdName = PRODNAME, @SellingPrice = SELLING_PRICE, @YTD = SALES_YTD
        FROM PRODUCT
        WHERE PRODID = @pProdId

        IF @@ROWCOUNT = 0
            THROW 50090, 'Product ID not found', 1
        SET @pReturnString = CONCAT('Prodid: ', @pProdId, ' Name: ' , @ProdName, ' Price: ', @SellingPrice, ' SalesYTD: ', @YTD);
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() IN (50090)
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END
    END CATCH
END
GO
--task 8
IF OBJECT_ID('UPD_PROD_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_PROD_SALESYTD;
GO
CREATE PROCEDURE UPD_PROD_SALESYTD @pProdId INT, @pamt MONEY OUTPUT AS
BEGIN
    BEGIN TRY
        IF @pamt < -999.99 or @pamt > 999.99
            THROW 50110, 'Amount out of range', 1
        UPDATE PRODUCT SET SALES_YTD = SALES_YTD + @pamt WHERE PRODID = @pProdId
        IF @@ROWCOUNT = 0
          THROW 50100, 'Product ID not found', 1
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() IN (50100, 50110)
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END
    END CATCH
END

GO
--task 9
IF OBJECT_ID('UPD_CUSTOMER_STATUS') IS NOT NULL
DROP PROCEDURE UPD_CUSTOMER_STATUS;
GO
CREATE PROCEDURE UPD_CUSTOMER_STATUS @pCustId INT, @pStatus NVARCHAR(7) OUTPUT AS
BEGIN
    BEGIN TRY
        IF @pStatus NOT IN ('OK','SUSPEND')
            THROW 50130, 'Invalid Status value', 1
        UPDATE CUSTOMER SET [STATUS] = @pStatus WHERE CUSTID = @pCustId
        IF @@ROWCOUNT = 0
          THROW 50120, 'Customer ID not found', 1
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() IN (50120, 50130)
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END
    END CATCH
END
GO
--task 10
IF OBJECT_ID('ADD_SIMPLE_SALE') IS NOT NULL
DROP PROCEDURE ADD_SIMPLE_SALE;
GO
CREATE PROCEDURE ADD_SIMPLE_SALE @pCustId INT, @pProdId INT, @pqty INT OUTPUT AS
BEGIN
    BEGIN TRY
        IF ((SELECT [STATUS] FROM CUSTOMER WHERE CUSTID = @pCustId) NOT IN ('OK'))
            THROW 50150, 'Customer status is not OK', 1
        IF @pqty < 1 or @pqty > 999
            THROW 50140, 'Sale Quantity outside valid range', 1
        DECLARE @pamt MONEY = @pqty * (SELECT SELLING_PRICE FROM PRODUCT WHERE PRODID = @pProdId)
        EXEC UPD_CUST_SALESYTD @pCustId = @pCustId, @pamt = @pamt;
        EXEC UPD_PROD_SALESYTD @pProdId, @pamt;
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() IN (50140, 50150)
            THROW
        ELSE IF ERROR_NUMBER() = 50070
            THROW 50160, 'Customer ID not found', 1
        ELSE IF ERROR_NUMBER() = 50100
            THROW 50170, 'Product ID not found', 1
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END
    END CATCH
END
GO
--task 11
/*
IF OBJECT_ID('SUM_CUSTOMER_SALESYTD') IS NOT NULL
DROP PROCEDURE SUM_CUSTOMER_SALESYTD;
GO
CREATE PROCEDURE SUM_CUSTOMER_SALESYTD AS
BEGIN
    BEGIN TRY
        SELECT SUM(SALES_YTD) FROM CUSTOMER
    END TRY
    BEGIN CATCH
        BEGIN
            DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
            THROW 50000, @ERRORMESSAGE, 1
        END
    END CATCH

END
*/
/*  ________THIS IS TEST CODE__________
EXEC ADD_CUSTOMER @pcustid = 1, @pcustname = 'testdude2';

EXEC ADD_CUSTOMER @pcustid = 500, @pcustname = 'testdude3';
EXEC DELETE_ALL_CUSTOMERS;
EXEC UPD_CUST_SALESYTD @pcustid = 1, @pamt = 5.00
select * from customer;

BEGIN
    DECLARE @OUTPUTVALUE1 NVARCHAR(100);
    EXEC GET_CUSTOMER_STRING @pCustId = 1 , @pReturnString = @OUTPUTVALUE1 OUTPUT;
    PRINT(@OUTPUTVALUE1)
END    
EXEC ADD_PRODUCT @pprodid = 1001, @pprodname = 'Solid Chris', @pprice = 1.00;

EXEC ADD_PRODUCT @pprodid = 1, @pprodname = 'Ian Brandon Anderson', @pprice = 1.00;

EXEC ADD_PRODUCT @pprodid = 1002, @pprodname = 'Ricardo', @pprice = 1000.00;

BEGIN
    DECLARE @OUTPUTVALUE2 NVARCHAR(100);
    EXEC GET_PROD_STRING @pProdId = 1001 , @pReturnString = @OUTPUTVALUE2 OUTPUT;
    PRINT(@OUTPUTVALUE2)
END
EXEC UPD_PROD_SALESYTD @pprodid = 1001, @pamt = 5.00;

EXEC DELETE_ALL_PRODUCT;

SELECT * from PRODUCT;
*/
SELECT CUSTID, CUSTNAME, SALES_YTD, SUM(SALES_YTD) as YTD FROM CUSTOMER
EXEC ADD_CUSTOMER @pcustid = 1, @pcustname = 'testdude2';
EXEC ADD_PRODUCT @pprodid = 1001, @pprodname = 'Solid Chris', @pprice = 1.00;
exec ADD_SIMPLE_SALE @pcustid = 1,@pprodid = 1001, @pqty = 1;
exec SUM_CUSTOMER_SALESYTD